{
  "video_id": "B_H1DxOI6Xs",
  "url": "https://www.youtube.com/watch?v=B_H1DxOI6Xs",
  "transcript_data": [
    {
      "text": "Vit just crossed 150 million weekly",
      "start": 0.4,
      "duration": 4.48
    },
    {
      "text": "downloads and this little build tool has",
      "start": 2.879,
      "duration": 3.841
    },
    {
      "text": "quietly taken over modern front-end",
      "start": 4.88,
      "duration": 4.08
    },
    {
      "text": "development. It started as a faster",
      "start": 6.72,
      "duration": 4.48
    },
    {
      "text": "alternative to Webpack, but now it's the",
      "start": 8.96,
      "duration": 3.679
    },
    {
      "text": "default choice for most of the",
      "start": 11.2,
      "duration": 3.599
    },
    {
      "text": "established front-end projects. Big",
      "start": 12.639,
      "duration": 4.321
    },
    {
      "text": "frameworks integrated out of the box and",
      "start": 14.799,
      "duration": 4.56
    },
    {
      "text": "its plug-in ecosystem has exploded to",
      "start": 16.96,
      "duration": 4.0
    },
    {
      "text": "the point where you can replace a good",
      "start": 19.359,
      "duration": 3.521
    },
    {
      "text": "chunk of your dev tooling with Vit",
      "start": 20.96,
      "duration": 4.479
    },
    {
      "text": "alone. So even though build tools might",
      "start": 22.88,
      "duration": 4.639
    },
    {
      "text": "not be an exciting topic, the impact VIT",
      "start": 25.439,
      "duration": 4.0
    },
    {
      "text": "has on modern web development is so",
      "start": 27.519,
      "duration": 4.16
    },
    {
      "text": "massive it can't be ignored. Let's spend",
      "start": 29.439,
      "duration": 4.001
    },
    {
      "text": "the next few minutes looking at Vit in",
      "start": 31.679,
      "duration": 3.841
    },
    {
      "text": "detail, explore its main selling points",
      "start": 33.44,
      "duration": 3.68
    },
    {
      "text": "and look at some actual practical",
      "start": 35.52,
      "duration": 4.0
    },
    {
      "text": "examples. For a bit of context, for",
      "start": 37.12,
      "duration": 4.48
    },
    {
      "text": "almost a decade, Webpack was the default",
      "start": 39.52,
      "duration": 4.559
    },
    {
      "text": "solution for bundling JavaScript. Unlike",
      "start": 41.6,
      "duration": 4.479
    },
    {
      "text": "earlier tools that just automated tasks",
      "start": 44.079,
      "duration": 4.0
    },
    {
      "text": "or merged files together, Webpack",
      "start": 46.079,
      "duration": 3.281
    },
    {
      "text": "treated your project as a full",
      "start": 48.079,
      "duration": 3.681
    },
    {
      "text": "dependency graph. With Webpack, every",
      "start": 49.36,
      "duration": 5.519
    },
    {
      "text": "JavaScript, CSS, image, or font you used",
      "start": 51.76,
      "duration": 5.119
    },
    {
      "text": "could be imported directly, processed",
      "start": 54.879,
      "duration": 4.0
    },
    {
      "text": "with loaders, and turned into optimized",
      "start": 56.879,
      "duration": 4.32
    },
    {
      "text": "bundles ready for the browser. This is",
      "start": 58.879,
      "duration": 4.561
    },
    {
      "text": "convenient, but Webpack is also slow,",
      "start": 61.199,
      "duration": 4.161
    },
    {
      "text": "notoriously annoying to configure, and",
      "start": 63.44,
      "duration": 3.76
    },
    {
      "text": "had a tendency to make developers",
      "start": 65.36,
      "duration": 3.84
    },
    {
      "text": "question their career choices halfway",
      "start": 67.2,
      "duration": 4.16
    },
    {
      "text": "through writing a Webpack config file.",
      "start": 69.2,
      "duration": 4.16
    },
    {
      "text": "But then came Evanu, who has a track",
      "start": 71.36,
      "duration": 3.68
    },
    {
      "text": "record of casually reinventing",
      "start": 73.36,
      "duration": 3.759
    },
    {
      "text": "established tools in his spare time. He",
      "start": 75.04,
      "duration": 4.0
    },
    {
      "text": "did it with Vue first and now he's doing",
      "start": 77.119,
      "duration": 4.481
    },
    {
      "text": "it again with Vit. Unlike Webpack which",
      "start": 79.04,
      "duration": 4.8
    },
    {
      "text": "was built in the CommonJS era, Vit was",
      "start": 81.6,
      "duration": 3.76
    },
    {
      "text": "designed for a world where modern",
      "start": 83.84,
      "duration": 3.52
    },
    {
      "text": "browsers already supported native ES",
      "start": 85.36,
      "duration": 4.32
    },
    {
      "text": "modules. So instead of bundling",
      "start": 87.36,
      "duration": 4.32
    },
    {
      "text": "everything up front, Vit spins up a",
      "start": 89.68,
      "duration": 3.759
    },
    {
      "text": "lightweight dev server that serves your",
      "start": 91.68,
      "duration": 3.92
    },
    {
      "text": "source files directly over ESM and",
      "start": 93.439,
      "duration": 3.921
    },
    {
      "text": "compiles only when the browser requests",
      "start": 95.6,
      "duration": 3.92
    },
    {
      "text": "them. That results in an instant server",
      "start": 97.36,
      "duration": 4.0
    },
    {
      "text": "startup and near instant hot module",
      "start": 99.52,
      "duration": 4.08
    },
    {
      "text": "replacement. Let's quickly clarify the",
      "start": 101.36,
      "duration": 4.0
    },
    {
      "text": "difference between CommonJS and ES",
      "start": 103.6,
      "duration": 3.28
    },
    {
      "text": "modules because it will help you",
      "start": 105.36,
      "duration": 4.079
    },
    {
      "text": "understand why VIT is so much faster.",
      "start": 106.88,
      "duration": 5.12
    },
    {
      "text": "CommonJS which NodeJS popularized loads",
      "start": 109.439,
      "duration": 4.481
    },
    {
      "text": "modules synchronously at runtime using",
      "start": 112.0,
      "duration": 4.32
    },
    {
      "text": "require. This works fine on the server",
      "start": 113.92,
      "duration": 4.559
    },
    {
      "text": "but for the browser all files have to be",
      "start": 116.32,
      "duration": 4.159
    },
    {
      "text": "bundled together first to avoid dozens",
      "start": 118.479,
      "duration": 3.441
    },
    {
      "text": "or hundreds of separate network",
      "start": 120.479,
      "duration": 3.841
    },
    {
      "text": "requests. ES modules on the other hand",
      "start": 121.92,
      "duration": 4.559
    },
    {
      "text": "are a browser native standard. They use",
      "start": 124.32,
      "duration": 4.24
    },
    {
      "text": "import and export statements, can load",
      "start": 126.479,
      "duration": 3.92
    },
    {
      "text": "asynchronously, and let the browser",
      "start": 128.56,
      "duration": 3.92
    },
    {
      "text": "handle dependency resolution without a",
      "start": 130.399,
      "duration": 4.241
    },
    {
      "text": "giant upfront bundle. This is the key to",
      "start": 132.48,
      "duration": 4.16
    },
    {
      "text": "VIT speed during development because the",
      "start": 134.64,
      "duration": 3.44
    },
    {
      "text": "bundler doesn't have to package your",
      "start": 136.64,
      "duration": 3.52
    },
    {
      "text": "entire project. The browser just grabs",
      "start": 138.08,
      "duration": 3.92
    },
    {
      "text": "the files it needs, and VIT only",
      "start": 140.16,
      "duration": 4.24
    },
    {
      "text": "compiles what's actually requested. It's",
      "start": 142.0,
      "duration": 4.64
    },
    {
      "text": "simple in concept, but in practice, it",
      "start": 144.4,
      "duration": 3.919
    },
    {
      "text": "makes a massive difference in developer",
      "start": 146.64,
      "duration": 4.08
    },
    {
      "text": "experience. But speed is just part of",
      "start": 148.319,
      "duration": 4.481
    },
    {
      "text": "its appeal. The real magic comes from",
      "start": 150.72,
      "duration": 3.84
    },
    {
      "text": "how it is designed. Vit's core",
      "start": 152.8,
      "duration": 3.84
    },
    {
      "text": "philosophy is to stay lean and avoid",
      "start": 154.56,
      "duration": 3.92
    },
    {
      "text": "covering every possible use case for",
      "start": 156.64,
      "duration": 4.239
    },
    {
      "text": "every developer. It focuses on the most",
      "start": 158.48,
      "duration": 4.479
    },
    {
      "text": "common patterns for building modern web",
      "start": 160.879,
      "duration": 3.601
    },
    {
      "text": "apps and leaves everything else to",
      "start": 162.959,
      "duration": 3.761
    },
    {
      "text": "plugins. That keeps the core small,",
      "start": 164.48,
      "duration": 4.72
    },
    {
      "text": "stable, and easy to maintain over time.",
      "start": 166.72,
      "duration": 4.239
    },
    {
      "text": "So, if a feature can be built as a",
      "start": 169.2,
      "duration": 3.84
    },
    {
      "text": "plug-in, it's not going into the core.",
      "start": 170.959,
      "duration": 3.841
    },
    {
      "text": "Let's look at the Vit progressive web",
      "start": 173.04,
      "duration": 4.08
    },
    {
      "text": "app plug-in as a practical example. You",
      "start": 174.8,
      "duration": 4.079
    },
    {
      "text": "can add service workers, offline",
      "start": 177.12,
      "duration": 3.759
    },
    {
      "text": "support, caching strategies, and any",
      "start": 178.879,
      "duration": 4.401
    },
    {
      "text": "other PWA features with just a few lines",
      "start": 180.879,
      "duration": 4.881
    },
    {
      "text": "of code. We first add the plugin into",
      "start": 183.28,
      "duration": 4.56
    },
    {
      "text": "our project as a dependency and then",
      "start": 185.76,
      "duration": 4.16
    },
    {
      "text": "register it in the vit config file.",
      "start": 187.84,
      "duration": 4.479
    },
    {
      "text": "That's it. This is the whole process. It",
      "start": 189.92,
      "duration": 4.16
    },
    {
      "text": "is also important to note that vit",
      "start": 192.319,
      "duration": 3.92
    },
    {
      "text": "shines when it comes to performance. It",
      "start": 194.08,
      "duration": 4.32
    },
    {
      "text": "uses fast native tools like ESB build",
      "start": 196.239,
      "duration": 4.561
    },
    {
      "text": "and SWC for heavy tasks while keeping",
      "start": 198.4,
      "duration": 4.24
    },
    {
      "text": "the rest of the system in JavaScript for",
      "start": 200.8,
      "duration": 4.159
    },
    {
      "text": "flexibility. If needed, framework",
      "start": 202.64,
      "duration": 4.64
    },
    {
      "text": "specific plugins can hook into Babel for",
      "start": 204.959,
      "duration": 4.481
    },
    {
      "text": "extra transformations. For production",
      "start": 207.28,
      "duration": 3.84
    },
    {
      "text": "builds, Vit sticks with rollup",
      "start": 209.44,
      "duration": 3.6
    },
    {
      "text": "prioritizing bundle size and plug-in",
      "start": 211.12,
      "duration": 4.0
    },
    {
      "text": "compatibility over raw build speed.",
      "start": 213.04,
      "duration": 4.0
    },
    {
      "text": "Before we look at some actual code, let",
      "start": 215.12,
      "duration": 3.52
    },
    {
      "text": "me tell you a few words about today's",
      "start": 217.04,
      "duration": 4.08
    },
    {
      "text": "sponsor. Savala is an all-in-one no",
      "start": 218.64,
      "duration": 4.4
    },
    {
      "text": "friction platform as a service for",
      "start": 221.12,
      "duration": 3.199
    },
    {
      "text": "deploying anything ranging from",
      "start": 223.04,
      "duration": 3.44
    },
    {
      "text": "interactive apps to databases or static",
      "start": 224.319,
      "duration": 4.241
    },
    {
      "text": "sites offering cloudnative performance",
      "start": 226.48,
      "duration": 3.679
    },
    {
      "text": "and a seamless dev experience with",
      "start": 228.56,
      "duration": 3.52
    },
    {
      "text": "advanced deployment pipelines, instant",
      "start": 230.159,
      "duration": 4.08
    },
    {
      "text": "preview for apps or static websites and",
      "start": 232.08,
      "duration": 4.239
    },
    {
      "text": "one-click deploy templates to accelerate",
      "start": 234.239,
      "duration": 4.08
    },
    {
      "text": "your development process. Under the",
      "start": 236.319,
      "duration": 3.761
    },
    {
      "text": "hood, Savala is leveraging Google",
      "start": 238.319,
      "duration": 4.241
    },
    {
      "text": "Kubernetes Engine across 25 regions. And",
      "start": 240.08,
      "duration": 4.239
    },
    {
      "text": "thanks to Cloudflare's edge network",
      "start": 242.56,
      "duration": 3.52
    },
    {
      "text": "integration, your static content is",
      "start": 244.319,
      "duration": 3.84
    },
    {
      "text": "globally optimized for speed. Check out",
      "start": 246.08,
      "duration": 3.68
    },
    {
      "text": "the link in the description and you can",
      "start": 248.159,
      "duration": 4.08
    },
    {
      "text": "get started for free with a $50 credit,",
      "start": 249.76,
      "duration": 4.64
    },
    {
      "text": "no hidden fees and predictable payments.",
      "start": 252.239,
      "duration": 4.321
    },
    {
      "text": "Back to the code, we'll start small with",
      "start": 254.4,
      "duration": 4.079
    },
    {
      "text": "the equivalent of a hello world project.",
      "start": 256.56,
      "duration": 3.519
    },
    {
      "text": "So, the first thing we'll do is to run",
      "start": 258.479,
      "duration": 3.761
    },
    {
      "text": "the create vit command in the terminal.",
      "start": 260.079,
      "duration": 3.921
    },
    {
      "text": "The build tool comes packed with a lot",
      "start": 262.24,
      "duration": 3.519
    },
    {
      "text": "of starters targeting all established",
      "start": 264.0,
      "duration": 3.6
    },
    {
      "text": "frameworks. But for the moment, we'll",
      "start": 265.759,
      "duration": 3.44
    },
    {
      "text": "simply focus on building a vanilla",
      "start": 267.6,
      "duration": 3.76
    },
    {
      "text": "project with TypeScript support. In the",
      "start": 269.199,
      "duration": 4.481
    },
    {
      "text": "generated project, we get an index html",
      "start": 271.36,
      "duration": 4.48
    },
    {
      "text": "page where a TypeScript file is imported",
      "start": 273.68,
      "duration": 4.32
    },
    {
      "text": "as a module. This tells the browser to",
      "start": 275.84,
      "duration": 4.16
    },
    {
      "text": "treat the file as an ES module, unlocks",
      "start": 278.0,
      "duration": 3.44
    },
    {
      "text": "features like import and export",
      "start": 280.0,
      "duration": 3.28
    },
    {
      "text": "statements directly in the browser",
      "start": 281.44,
      "duration": 3.6
    },
    {
      "text": "without the need for a bundler during",
      "start": 283.28,
      "duration": 4.16
    },
    {
      "text": "development. It also ensures the script",
      "start": 285.04,
      "duration": 4.08
    },
    {
      "text": "is loaded with proper dependency",
      "start": 287.44,
      "duration": 4.24
    },
    {
      "text": "handling. So if main ts imports other",
      "start": 289.12,
      "duration": 4.4
    },
    {
      "text": "files, the browser will fetch them as",
      "start": 291.68,
      "duration": 3.6
    },
    {
      "text": "needed rather than loading everything in",
      "start": 293.52,
      "duration": 3.84
    },
    {
      "text": "a single big blob. But this is only",
      "start": 295.28,
      "duration": 3.919
    },
    {
      "text": "viable in development mode. In",
      "start": 297.36,
      "duration": 3.92
    },
    {
      "text": "production, vit doesn't just dump your",
      "start": 299.199,
      "duration": 4.0
    },
    {
      "text": "row module files into the disc folder",
      "start": 301.28,
      "duration": 3.84
    },
    {
      "text": "and lets the browser request them one by",
      "start": 303.199,
      "duration": 4.0
    },
    {
      "text": "one. that would be too slow and will",
      "start": 305.12,
      "duration": 3.84
    },
    {
      "text": "kill the server with dozens or hundreds",
      "start": 307.199,
      "duration": 4.72
    },
    {
      "text": "of separate HTTP requests. So for",
      "start": 308.96,
      "duration": 5.2
    },
    {
      "text": "production, VIT will run a rollup based",
      "start": 311.919,
      "duration": 3.681
    },
    {
      "text": "build step which is in charge of",
      "start": 314.16,
      "duration": 3.52
    },
    {
      "text": "bundling modules into fewer optimized",
      "start": 315.6,
      "duration": 4.319
    },
    {
      "text": "chunks, minifying and re-shaking unused",
      "start": 317.68,
      "duration": 4.88
    },
    {
      "text": "code, inlining small assets like SVGs or",
      "start": 319.919,
      "duration": 4.881
    },
    {
      "text": "tiny images, applying code splitting so",
      "start": 322.56,
      "duration": 3.919
    },
    {
      "text": "that browsers only downloads what's",
      "start": 324.8,
      "duration": 4.08
    },
    {
      "text": "needed for the current page and finally",
      "start": 326.479,
      "duration": 4.241
    },
    {
      "text": "generates hashed file names for cache",
      "start": 328.88,
      "duration": 4.24
    },
    {
      "text": "busting. So the module syntax will still",
      "start": 330.72,
      "duration": 4.08
    },
    {
      "text": "be present in your source code and",
      "start": 333.12,
      "duration": 3.68
    },
    {
      "text": "preserved during compilation, but the",
      "start": 334.8,
      "duration": 4.239
    },
    {
      "text": "final output is optimized bundles and",
      "start": 336.8,
      "duration": 3.92
    },
    {
      "text": "chunks that are efficient for browsers",
      "start": 339.039,
      "duration": 3.761
    },
    {
      "text": "to load in production. Back to our",
      "start": 340.72,
      "duration": 4.479
    },
    {
      "text": "index.html, you probably noticed that we",
      "start": 342.8,
      "duration": 4.08
    },
    {
      "text": "are importing directly a TypeScript",
      "start": 345.199,
      "duration": 3.921
    },
    {
      "text": "file, which of course is not natively",
      "start": 346.88,
      "duration": 4.08
    },
    {
      "text": "supported by the browser. This is where",
      "start": 349.12,
      "duration": 3.359
    },
    {
      "text": "Vit starts running your code in",
      "start": 350.96,
      "duration": 3.12
    },
    {
      "text": "development mode. When the browser",
      "start": 352.479,
      "duration": 3.841
    },
    {
      "text": "requests a TS file, Vit intercepts the",
      "start": 354.08,
      "duration": 4.0
    },
    {
      "text": "request, compiles the TypeScript to",
      "start": 356.32,
      "duration": 3.68
    },
    {
      "text": "JavaScript on the fly, and serves it",
      "start": 358.08,
      "duration": 4.48
    },
    {
      "text": "instantly. Then if you update the file,",
      "start": 360.0,
      "duration": 4.319
    },
    {
      "text": "vit pushes the change to the browser",
      "start": 362.56,
      "duration": 3.759
    },
    {
      "text": "through hot module replacement without a",
      "start": 364.319,
      "duration": 4.561
    },
    {
      "text": "full page reload. Also note that in dev",
      "start": 366.319,
      "duration": 4.481
    },
    {
      "text": "mode, vit adds a version query parameter",
      "start": 368.88,
      "duration": 3.92
    },
    {
      "text": "to module imports to force the browser",
      "start": 370.8,
      "duration": 3.679
    },
    {
      "text": "to request the latest file after a",
      "start": 372.8,
      "duration": 3.679
    },
    {
      "text": "change, avoiding caching headaches or",
      "start": 374.479,
      "duration": 4.56
    },
    {
      "text": "the need for manual hard reloads. Next,",
      "start": 376.479,
      "duration": 4.481
    },
    {
      "text": "let's take it one step further.",
      "start": 379.039,
      "duration": 3.841
    },
    {
      "text": "Splitting projects into multiple files",
      "start": 380.96,
      "duration": 3.92
    },
    {
      "text": "and modules is something really common,",
      "start": 382.88,
      "duration": 3.84
    },
    {
      "text": "but we rarely think about what happens",
      "start": 384.88,
      "duration": 3.92
    },
    {
      "text": "under the hood or the implications for",
      "start": 386.72,
      "duration": 4.08
    },
    {
      "text": "performance. With VIT, you can take",
      "start": 388.8,
      "duration": 4.16
    },
    {
      "text": "advantage of native ES module semantics",
      "start": 390.8,
      "duration": 4.32
    },
    {
      "text": "during development and then use code",
      "start": 392.96,
      "duration": 3.92
    },
    {
      "text": "splitting in production without having",
      "start": 395.12,
      "duration": 4.24
    },
    {
      "text": "to change any configuration file. To see",
      "start": 396.88,
      "duration": 4.319
    },
    {
      "text": "this in action, we'll start by adding a",
      "start": 399.36,
      "duration": 3.839
    },
    {
      "text": "second file called gridts that contains",
      "start": 401.199,
      "duration": 3.84
    },
    {
      "text": "a simple function for rendering a",
      "start": 403.199,
      "duration": 3.601
    },
    {
      "text": "message on the page and then import it",
      "start": 405.039,
      "duration": 4.321
    },
    {
      "text": "in our main TS file. If you run npm",
      "start": 406.8,
      "duration": 4.32
    },
    {
      "text": "rundev right now, you'll notice that in",
      "start": 409.36,
      "duration": 3.6
    },
    {
      "text": "the network tab, the browser requests",
      "start": 411.12,
      "duration": 3.919
    },
    {
      "text": "both main and grid files separately.",
      "start": 412.96,
      "duration": 4.32
    },
    {
      "text": "This is the ES module system at work.",
      "start": 415.039,
      "duration": 3.681
    },
    {
      "text": "But let's make things a bit more",
      "start": 417.28,
      "duration": 3.199
    },
    {
      "text": "interesting by adding in a dynamic",
      "start": 418.72,
      "duration": 3.84
    },
    {
      "text": "import. Dynamic imports allow you to",
      "start": 420.479,
      "duration": 3.84
    },
    {
      "text": "load code only when it's actually",
      "start": 422.56,
      "duration": 3.52
    },
    {
      "text": "needed, which is great for performance",
      "start": 424.319,
      "duration": 3.921
    },
    {
      "text": "and user experience. In production,",
      "start": 426.08,
      "duration": 4.0
    },
    {
      "text": "vitan rollup will detect this and",
      "start": 428.24,
      "duration": 3.519
    },
    {
      "text": "automatically create a separate chunk",
      "start": 430.08,
      "duration": 4.0
    },
    {
      "text": "for it. In the weatherts file, we'll",
      "start": 431.759,
      "duration": 3.761
    },
    {
      "text": "simply fetch some data from a third",
      "start": 434.08,
      "duration": 4.72
    },
    {
      "text": "party API. Then in main.ts, we'll import",
      "start": 435.52,
      "duration": 5.28
    },
    {
      "text": "this functionality only if the user",
      "start": 438.8,
      "duration": 4.16
    },
    {
      "text": "explicitly clicks on the weather button.",
      "start": 440.8,
      "duration": 3.92
    },
    {
      "text": "In development, clicking the button",
      "start": 442.96,
      "duration": 3.28
    },
    {
      "text": "triggers the browser to request the",
      "start": 444.72,
      "duration": 3.44
    },
    {
      "text": "weather file. Vit compiles it to",
      "start": 446.24,
      "duration": 4.48
    },
    {
      "text": "JavaScript instantly and serves it. In",
      "start": 448.16,
      "duration": 4.479
    },
    {
      "text": "production, rollup creates a separate",
      "start": 450.72,
      "duration": 4.08
    },
    {
      "text": "WeatherJS file chunk with a unique hash",
      "start": 452.639,
      "duration": 4.481
    },
    {
      "text": "ID. The initial bundle stays small and",
      "start": 454.8,
      "duration": 4.16
    },
    {
      "text": "this chunk only downloads when the user",
      "start": 457.12,
      "duration": 4.0
    },
    {
      "text": "clicks the button. Of course, this is a",
      "start": 458.96,
      "duration": 4.079
    },
    {
      "text": "naive example, but in real world",
      "start": 461.12,
      "duration": 3.84
    },
    {
      "text": "scenarios, the module loaded on demand",
      "start": 463.039,
      "duration": 4.401
    },
    {
      "text": "could be an entire part of your SPA. But",
      "start": 464.96,
      "duration": 4.4
    },
    {
      "text": "what's really interesting is that VIT",
      "start": 467.44,
      "duration": 3.36
    },
    {
      "text": "doesn't just stop at being a front-end",
      "start": 469.36,
      "duration": 4.08
    },
    {
      "text": "dev server. It was designed with SSR in",
      "start": 470.8,
      "duration": 4.56
    },
    {
      "text": "mind, so it can power both client",
      "start": 473.44,
      "duration": 3.28
    },
    {
      "text": "rendered and server rendered",
      "start": 475.36,
      "duration": 4.239
    },
    {
      "text": "applications. In SSR mode, Vit will let",
      "start": 476.72,
      "duration": 4.8
    },
    {
      "text": "you import your components and run them",
      "start": 479.599,
      "duration": 4.32
    },
    {
      "text": "on the server before sending HTML to the",
      "start": 481.52,
      "duration": 4.72
    },
    {
      "text": "client. The same instant hot module",
      "start": 483.919,
      "duration": 3.84
    },
    {
      "text": "reloading experience works for your",
      "start": 486.24,
      "duration": 3.12
    },
    {
      "text": "server code, too, which means you can",
      "start": 487.759,
      "duration": 3.28
    },
    {
      "text": "tweak your backend logic or templates",
      "start": 489.36,
      "duration": 3.36
    },
    {
      "text": "and see changes immediately without",
      "start": 491.039,
      "duration": 3.761
    },
    {
      "text": "restarting the server. Looking at the",
      "start": 492.72,
      "duration": 4.159
    },
    {
      "text": "bigger picture, Vitz Rise is tied to a",
      "start": 494.8,
      "duration": 3.6
    },
    {
      "text": "shift in how developers approach",
      "start": 496.879,
      "duration": 3.841
    },
    {
      "text": "tooling. For years, build tools tried to",
      "start": 498.4,
      "duration": 4.32
    },
    {
      "text": "be everything at once. Vit went the",
      "start": 500.72,
      "duration": 3.759
    },
    {
      "text": "other way and focused on keeping the",
      "start": 502.72,
      "duration": 3.52
    },
    {
      "text": "core lean, deferring the rest of the",
      "start": 504.479,
      "duration": 3.761
    },
    {
      "text": "work to plugins, and trusting native",
      "start": 506.24,
      "duration": 3.76
    },
    {
      "text": "browser capabilities instead of",
      "start": 508.24,
      "duration": 4.0
    },
    {
      "text": "replacing them. If you like this video,",
      "start": 510.0,
      "duration": 3.919
    },
    {
      "text": "you should check out one of these ones",
      "start": 512.24,
      "duration": 3.599
    },
    {
      "text": "next. Don't forget to click the like",
      "start": 513.919,
      "duration": 4.0
    },
    {
      "text": "button, subscribe to the channel, and",
      "start": 515.839,
      "duration": 5.921
    },
    {
      "text": "until next time, thank you for watching.",
      "start": 517.919,
      "duration": 3.841
    }
  ],
  "transcript_text": "Vit just crossed 150 million weekly downloads and this little build tool has quietly taken over modern front-end development. It started as a faster alternative to Webpack, but now it's the default choice for most of the established front-end projects. Big frameworks integrated out of the box and its plug-in ecosystem has exploded to the point where you can replace a good chunk of your dev tooling with Vit alone. So even though build tools might not be an exciting topic, the impact VIT has on modern web development is so massive it can't be ignored. Let's spend the next few minutes looking at Vit in detail, explore its main selling points and look at some actual practical examples. For a bit of context, for almost a decade, Webpack was the default solution for bundling JavaScript. Unlike earlier tools that just automated tasks or merged files together, Webpack treated your project as a full dependency graph. With Webpack, every JavaScript, CSS, image, or font you used could be imported directly, processed with loaders, and turned into optimized bundles ready for the browser. This is convenient, but Webpack is also slow, notoriously annoying to configure, and had a tendency to make developers question their career choices halfway through writing a Webpack config file. But then came Evanu, who has a track record of casually reinventing established tools in his spare time. He did it with Vue first and now he's doing it again with Vit. Unlike Webpack which was built in the CommonJS era, Vit was designed for a world where modern browsers already supported native ES modules. So instead of bundling everything up front, Vit spins up a lightweight dev server that serves your source files directly over ESM and compiles only when the browser requests them. That results in an instant server startup and near instant hot module replacement. Let's quickly clarify the difference between CommonJS and ES modules because it will help you understand why VIT is so much faster. CommonJS which NodeJS popularized loads modules synchronously at runtime using require. This works fine on the server but for the browser all files have to be bundled together first to avoid dozens or hundreds of separate network requests. ES modules on the other hand are a browser native standard. They use import and export statements, can load asynchronously, and let the browser handle dependency resolution without a giant upfront bundle. This is the key to VIT speed during development because the bundler doesn't have to package your entire project. The browser just grabs the files it needs, and VIT only compiles what's actually requested. It's simple in concept, but in practice, it makes a massive difference in developer experience. But speed is just part of its appeal. The real magic comes from how it is designed. Vit's core philosophy is to stay lean and avoid covering every possible use case for every developer. It focuses on the most common patterns for building modern web apps and leaves everything else to plugins. That keeps the core small, stable, and easy to maintain over time. So, if a feature can be built as a plug-in, it's not going into the core. Let's look at the Vit progressive web app plug-in as a practical example. You can add service workers, offline support, caching strategies, and any other PWA features with just a few lines of code. We first add the plugin into our project as a dependency and then register it in the vit config file. That's it. This is the whole process. It is also important to note that vit shines when it comes to performance. It uses fast native tools like ESB build and SWC for heavy tasks while keeping the rest of the system in JavaScript for flexibility. If needed, framework specific plugins can hook into Babel for extra transformations. For production builds, Vit sticks with rollup prioritizing bundle size and plug-in compatibility over raw build speed. Before we look at some actual code, let me tell you a few words about today's sponsor. Savala is an all-in-one no friction platform as a service for deploying anything ranging from interactive apps to databases or static sites offering cloudnative performance and a seamless dev experience with advanced deployment pipelines, instant preview for apps or static websites and one-click deploy templates to accelerate your development process. Under the hood, Savala is leveraging Google Kubernetes Engine across 25 regions. And thanks to Cloudflare's edge network integration, your static content is globally optimized for speed. Check out the link in the description and you can get started for free with a $50 credit, no hidden fees and predictable payments. Back to the code, we'll start small with the equivalent of a hello world project. So, the first thing we'll do is to run the create vit command in the terminal. The build tool comes packed with a lot of starters targeting all established frameworks. But for the moment, we'll simply focus on building a vanilla project with TypeScript support. In the generated project, we get an index html page where a TypeScript file is imported as a module. This tells the browser to treat the file as an ES module, unlocks features like import and export statements directly in the browser without the need for a bundler during development. It also ensures the script is loaded with proper dependency handling. So if main ts imports other files, the browser will fetch them as needed rather than loading everything in a single big blob. But this is only viable in development mode. In production, vit doesn't just dump your row module files into the disc folder and lets the browser request them one by one. that would be too slow and will kill the server with dozens or hundreds of separate HTTP requests. So for production, VIT will run a rollup based build step which is in charge of bundling modules into fewer optimized chunks, minifying and re-shaking unused code, inlining small assets like SVGs or tiny images, applying code splitting so that browsers only downloads what's needed for the current page and finally generates hashed file names for cache busting. So the module syntax will still be present in your source code and preserved during compilation, but the final output is optimized bundles and chunks that are efficient for browsers to load in production. Back to our index.html, you probably noticed that we are importing directly a TypeScript file, which of course is not natively supported by the browser. This is where Vit starts running your code in development mode. When the browser requests a TS file, Vit intercepts the request, compiles the TypeScript to JavaScript on the fly, and serves it instantly. Then if you update the file, vit pushes the change to the browser through hot module replacement without a full page reload. Also note that in dev mode, vit adds a version query parameter to module imports to force the browser to request the latest file after a change, avoiding caching headaches or the need for manual hard reloads. Next, let's take it one step further. Splitting projects into multiple files and modules is something really common, but we rarely think about what happens under the hood or the implications for performance. With VIT, you can take advantage of native ES module semantics during development and then use code splitting in production without having to change any configuration file. To see this in action, we'll start by adding a second file called gridts that contains a simple function for rendering a message on the page and then import it in our main TS file. If you run npm rundev right now, you'll notice that in the network tab, the browser requests both main and grid files separately. This is the ES module system at work. But let's make things a bit more interesting by adding in a dynamic import. Dynamic imports allow you to load code only when it's actually needed, which is great for performance and user experience. In production, vitan rollup will detect this and automatically create a separate chunk for it. In the weatherts file, we'll simply fetch some data from a third party API. Then in main.ts, we'll import this functionality only if the user explicitly clicks on the weather button. In development, clicking the button triggers the browser to request the weather file. Vit compiles it to JavaScript instantly and serves it. In production, rollup creates a separate WeatherJS file chunk with a unique hash ID. The initial bundle stays small and this chunk only downloads when the user clicks the button. Of course, this is a naive example, but in real world scenarios, the module loaded on demand could be an entire part of your SPA. But what's really interesting is that VIT doesn't just stop at being a front-end dev server. It was designed with SSR in mind, so it can power both client rendered and server rendered applications. In SSR mode, Vit will let you import your components and run them on the server before sending HTML to the client. The same instant hot module reloading experience works for your server code, too, which means you can tweak your backend logic or templates and see changes immediately without restarting the server. Looking at the bigger picture, Vitz Rise is tied to a shift in how developers approach tooling. For years, build tools tried to be everything at once. Vit went the other way and focused on keeping the core lean, deferring the rest of the work to plugins, and trusting native browser capabilities instead of replacing them. If you like this video, you should check out one of these ones next. Don't forget to click the like button, subscribe to the channel, and until next time, thank you for watching.",
  "language": "en"
}